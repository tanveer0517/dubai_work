# -*- coding: utf-8 -*-
##############################################################################
#
#    Bista Solutions Pvt. Ltd
#    Copyright (C) 2018 (http://www.bistasolutions.com)
#
##############################################################################
from odoo import  models, fields, api, exceptions, _
from gomartapi import *
from datetime import datetime
import logging
import re
_logger = logging.getLogger(__name__)


class ResPartner(models.Model):
    _inherit = "res.partner"

    _GENDER = [
                ('1', _('Male')),
                ('2', _('Female'))
              ]

    go_mart_cust_id = fields.Integer("Customer GoMart ID", readonly="True", help="This field will be generated by GoMart API.")
    firstname = fields.Char("First Name", readonly="False", store="True" , compute="_compute_firstname", help="Customer First Name")
    lastname = fields.Char("Last Name", readonly="False", store="True", compute="_compue_lastname", help="Customer Last Name")
    gender = fields.Selection(selection=_GENDER, default='1', string="Gender")
    dob = fields.Date("Date of Birth", readonly="False", store="True", compute="_compute_dob", help="Date of Birth")
    country_id = fields.Many2one("res.country", "Nationality of Customer")
    password = fields.Char("Password", readonly="False", store="True" , compute="_compute_pwd")
    is_active = fields.Boolean("Active", compute="_compute_is_active", help="Active or Inactive status")

    @api.one
    @api.constrains("email")
    def _check_email(self):
        result = re.match('^[_a-z0-9-]+(\.[_a-z0-9-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,4})$', self.email)
        if result == None:
            raise exceptions.Warning("Please enter valid Email id")

    @api.one
    def _compute_pwd(self):
        if not self.password:
            self.password = "welcome"

    @api.one
    def _compute_is_active(self):
        if not self.is_active:
            self.is_active = self.active

    @api.one
    def _compute_firstname(self):
        if not self.firstname:
            self.firstname = "".join((self.name).split(" ")[:1])

    @api.one
    def _compue_lastname(self):
        if not self.firstname:
            self.lastname = "".join((self.name).split(" ")[1:])

    @api.one
    def _compute_dob(self):
        if not self.dob:
            self.dob = datetime.now().date()

    @api.multi
    def createCustomer(self): 
        _active = {True:1, False:2}
        _gender = {'1':1, '2':2}
        gomart_server = self.env['gomart.server.api'].search([], limit=1)
        try:
            if gomart_server and gomart_server.name: 
                if self.is_company == False:
                    # API setCustomer
                    user_API = setCustomer(
                                        gomart_server.name,
                                        self.id,  # erp_customer_id
                                        self.firstname or ("".join((self.name).split(" ")[:1])),  # erp_first_name
                                        self.lastname or ("".join((self.name).split(" ")[1:])),  # erp_last_name
                                        self.dob or str(datetime.now().date()),  # erp_dob
                                        self.email,  # erp_email
                                        self.mobile,  # erp_mobile
                                        self.password,  # erp_password
                                        _gender.get(self.gender),  # erp_gender [1- Male, 2- Female]
                                        _active.get(self.is_active)  # active [1- Active, 0- Inactive]
                                        )
                    # Log
                    _logger.warning("\n\n\n" + " Customer API : \n" + " Data : " + str(user_API.get('data')) + "\n Status : " + str(user_API.get('status_code')) + "\n json_dump :" + str(user_API.get('json_dump')))
                    if user_API.get("status_code") and user_API.get('json_dump').get('code') == 200:
                        if user_API.get('json_dump').get('gomart_user_id'):
                            self.write({'go_mart_cust_id':user_API.get('user_id')})
                        else:
                            _logger.warning("GoMart APi setCustomer returns None data.")
                    else:
                        msg = "GoMart APi setCustomer, Status code  %s invalid " % str(user_API.get('json_dump').get('code')) + " " + "GoMart Message : %s" % str(user_API.get('json_dump').get('error'))
                        _logger.warning(msg)
                else:
                    _logger.warning("You have selected Company as Customer")
            else:
                msg = "Please update correct GoMart APi server."
                _logger.warning(msg)
        except:
            msg = "GoMart API setUser is not working."
            _logger.warning(msg)

        return True
