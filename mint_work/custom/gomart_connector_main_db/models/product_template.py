# -*- coding: utf-8 -*-
##############################################################################
#
#    Bista Solutions Pvt. Ltd
#    Copyright (C) 2018 (http://www.bistasolutions.com)
#
##############################################################################
from odoo import  models, fields, api, exceptions, _
from gomartapi import *
import logging

_logger = logging.getLogger(__name__)


class ProductTemplate(models.Model):
    _inherit = 'product.template'

    go_mart_product_id = fields.Integer(string="GoMart Product ID", readonly="True", help="This field will generated by GoMart API.")
    go_mart_range_id = fields.Integer(string="GoMart Range ID", readonly=True, help="This field will be generated by GoMart API.")
    small_description = fields.Text(string="Small Description")
    range_name = fields.Char(string="Product Range", help="Range")
    product_img_name = fields.Char(string="GoMart Image Name?", readonly="False", compute="_compute_product_img_name", help="Enter image name")
    
    @api.one
    def _compute_product_img_name(self):
        if not self.product_img_name:
            self.product_img_name = self.name + '.jpg'

    @api.multi
    def add_to_gomart(self):
        rec_dict = {}
        gomart_server = self.env['gomart.server.api'].search([], limit=1)
        try:
            if gomart_server and gomart_server.name:  
                _active = {True:1, False:0}
                if self.categ_id.parent_id.id:
                    # setProduct API
                    product_API = setProduct(
                                          gomart_server.name,
                                          self.id,  # erp_product_id
                                          self.name,  # erp_product_name
                                          self.categ_id.parent_id.id,  # erp_category_id
                                          self.categ_id.id,  # erp_subcategory_id
                                          self.brand_id.id,  # erp_brand_id
                                          0,  # erp_family_id
                                          self.small_description,  # erp_small_description
                                          self.description_sale,
                                          _active.get(self.active)  # active
                                        )
                    _logger.warning("\n\n\n" + " Product API : \n" + " Data : " + str(product_API.get('data')) + "\n Status : " + str(product_API.get('status_code')) + "\n json_dump :" + str(product_API.get('json_dump')))
                    if (product_API.get('status_code')and product_API.get('json_dump').get('code')) == 200 :
                        if product_API.get('product_id') :
                            rec_dict.update({'product_id':product_API.get('product_id')})
                        else:
                            _logger.warning("GoMart APi setProduct returns None data.")
                    else:
                        msg = "GoMart APi setProduct,Invalid code %s" % str(product_API.get('json_dump').get('code')) + ' ' + 'GoMart error message :  %s' % str(product_API.get('json_dump').get('error'))
                        _logger.warning(msg)

                else:
                    # setProduct API
                    product_API = setProduct(
                                          gomart_server.name,
                                          self.id,  # erp_product_id
                                          self.name,  # erp_product_name
                                          self.categ_id.id,  # erp_category_id
                                          0,  # self.categ_id.id,  # erp_subcategory_id
                                          self.brand_id.id,  # erp_brand_id
                                          0,  # erp_family_id
                                          self.small_description,  # erp_small_description
                                          self.description_sale,
                                          _active.get(self.active)  # active
                                )
                    # Log
                    _logger.warning("\n\n\n" + " Product API : \n" + " Data : " + str(product_API.get('data')) + "\n Status : " + str(product_API.get('status_code')) + "\n json_dump :" + str(product_API.get('json_dump')))
                    if (product_API.get('status_code')and product_API.get('json_dump').get('code')) == 200 :
                        if product_API.get('product_id') :
                            rec_dict.update({'product_id':product_API.get('product_id')})
                    else:
                        msg = "GoMart APi setProduct,Invalid code %s" % str(product_API.get('json_dump').get('code')) + ' ' + 'GoMart error message: %s' % str(product_API.get('json_dump').get('error'))
                        _logger.warning(msg)

                # setProductRange API
                range_API = setProductRange(
                                              gomart_server.name,
                                              self.id,  # erp_product_id
                                              self.id,  # erp_range_id
                                              self.range_name or self.name,  # erp_range_name
                                              self.uom_id.id,  # erp_uom_id
                                              self.product_img_name,  # erp_range_image
                                              self.barcode,  # erp_barcode
#                                               self.usr_id.id  # erp_added_by
                                            )
                # Log
                _logger.warning("\n\n\n" + " Range API : \n" + " Data : " + str(range_API.get('data')) + "\n Status : " + str(range_API.get('status_code')) + "\n json_dump :" + str(range_API.get('json_dump')))
                if (range_API.get('status_code') and range_API.get('json_dump').get('code')) == 200:
                    if range_API.get('range_id'):
                        rec_dict.update({'range_id':range_API.get('range_id')})
                else:
                    msg = "GoMart APi setProductRange,Invalid code %s" % str(range_API.get('json_dump').get('code')) + ' ' + 'GoMart error message : %s' % str(range_API.get('json_dump').get('error'))
                    _logger.warning(msg)

                if rec_dict.get('product_id') and rec_dict.get('range_id'):
                    self.write({'go_mart_product_id':rec_dict.get('product_id'), 'go_mart_range_id':rec_dict.get('range_id')})
                elif rec_dict.get('product_id'):
                    self.write({'go_mart_product_id':rec_dict.get('product_id')})
                elif rec_dict.get('range_id'):
                    self.write({'go_mart_range_id':rec_dict.get('range_id')})
            else:            
                msg = "Please update correct GoMart APi server."
                _logger.warning(msg)
        except:
            _logger.warning("GoMart server is down or GoMart setProductRange API is not working.")
        return True
