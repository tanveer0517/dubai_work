# -*- coding: utf-8 -*-
##############################################################################
#
#    Bista Solutions Pvt. Ltd
#    Copyright (C) 2018 (http://www.bistasolutions.com)
#
##############################################################################
from odoo import models, fields, api, exceptions
from gomartapi import *
import logging

_logger = logging.getLogger(__name__)


class ProductBrand(models.Model):
    _inherit = "product.brand"

    go_mart_brand_id = fields.Integer("GoMart Brand ID", readonly="True", help="This field will generated by GoMart API.")
    brand_img_filename = fields.Char("Brand Image name", readonly="False", compute="_compute_brand_image_name", help="Brand Image filename field.") 

    @api.one
    def _compute_brand_image_name(self):
        if not self.brand_img_filename:
            self.brand_img_filename = self.name + ".jpg" 

    @api.model
    def create(self, values):
        _active = {True:1, False:2}
        rec = super(ProductBrand, self).create(values)
        gomart_server = self.env['gomart.server.api'].search([], limit=1)
        try:
            if gomart_server and gomart_server.name: 
                # API setBrand
                brand_API = setBrand(gomart_server.name,
                                     rec.id,
                                     rec.name,
                                     rec.brand_img_filename,
                                     _active.get(rec.active)
                                     )
                # Log
                _logger.warning("\n\n\n" + " Brand API : " + 
                                "\n Data : " + str(brand_API.get('data')) + 
                                "\n Status : " + str(brand_API.get('status_code')) + 
                                "\n json_dump :" + str(brand_API.get('json_dump'))
                                )
                if brand_API.get('json_dump').get('code') == 200:
                    rec.go_mart_brand_id = brand_API.get('brand_id')
                else:
                    _logger.warning('GoMart APi setBrand, Invalid code %s' % 
                                    str(brand_API.get('json_dump').get('code')) + 
                                    ' ' + "GoMart error Message %s" % 
                                    str(brand_API.get('json_dump').get('error')) or 'None'
                                    )
            else:
                _logger.warning("Please configure correct GoMart APi server.")
        except:
            _logger.warning("GoMart APi setBrand is not working or server Down.")
        return rec

    @api.multi
    def write(self, vals):
        gomart_server = self.env['gomart.server.api'].search([], limit=1)
        _active = {True:1, False:2}
        is_active = ''
        if _active.get(vals.get('active')):
            is_active = _active.get(vals.get('active'))
        else:
            is_active = _active.get(self.active)
        try: 
            if gomart_server and gomart_server.name: 
                # API setBrand
                brand_API = setBrand(gomart_server.name,
                                     self.id,
                                     vals.get('name') or self.name,
                                     vals.get('brand_img_filename') or self.brand_img_filename,
                                     is_active)
                # Log
                _logger.warning("\n\n\n" + " Brand API : " + 
                                "\n Data : " + str(brand_API.get('data')) + 
                                "\n Status : " + str(brand_API.get('status_code')) + 
                                "\n json_dump :" + str(brand_API.get('json_dump'))
                                )

                if brand_API.get('json_dump').get('code') == 200:
                            vals.update({'go_mart_brand_id':brand_API.get('brand_id')})
                else:
                    _logger.warning('GoMart APi setBrand Invalid %s' % 
                                    str(brand_API.get('json_dump').get('code')) + ' ' + 
                                   'GoMart Message : %s' % str(brand_API.get('json_dump').get('error') or 'None.')
                                   )
            else:
                _logger.warning("Please configure correct GoMart APi server.")
        except: 
            _logger.warning("GoMart APi setBrand not working or server Down.")
        return super(ProductBrand, self).write(vals)
