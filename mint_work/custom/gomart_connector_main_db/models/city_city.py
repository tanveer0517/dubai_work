# -*- coding: utf-8 -*-
##############################################################################
#
#    Bista Solutions Pvt. Ltd
#    Copyright (C) 2018 (http://www.bistasolutions.com)
#
##############################################################################
from odoo import models, fields, api, exceptions
from gomartapi import *
import logging

_logger = logging.getLogger(__name__)


class CityCity(models.Model):
    _inherit = 'city.city'

    server_id = fields.Many2one('saas_portal.server', 'Server name')
    gomart_city_id = fields.Char(string="GoMart City ID", readonly="True", help="This field will be generated by GoMart API.")
    is_active = fields.Boolean('Active', default=True, help="This is for the active or inactive status.")

    @api.one
    @api.constrains('code')
    def _check_city_code(self):
        if not self.code.isnumeric():
            msg = "City code must be numeric and not blank."
            _logger.warning(msg);raise exceptions.Warning(msg)

    @api.model
    def create(self, values):
        _active = {True:1, False:2}
        rec = super(CityCity, self).create(values)
        if rec.country_id.name == "United Arab Emirates":
            try:
                gomart_server = self.env['gomart.server.api'].search([], limit=1)
                if gomart_server and gomart_server.name:
                    city_API = setCity(
                                        gomart_server.name,
                                        rec.id,
                                        rec.name,
                                        rec.code,
                                        rec.state_id.id,
                                        _active.get(rec.is_active)
                                      )
                    # Log
                    _logger.warning("\n\n\n" + " City API : " + 
                                    "\n Data : " + str(city_API.get('data')) + 
                                    "\n Status : " + str(city_API.get('status_code')) + 
                                    "\n json_dump :" + str(city_API.get('json_dump')))
                    if city_API.get("json_dump").get("code") == 200:
                        rec.gomart_city_id = city_API.get("city_id")
                    else:
                        _logger.warning('GoMart APi setCity,Invalid code %s' % 
                                    str(city_API.get("json_dump").get("code")) + ' ' + 
                                    'GoMart error message : %s' % 
                                    str(city_API.get("json_dump").get("code") or 'None.'))
                else:
                    _logger.warning("Please configure correct GoMart APi server.")
            except:
                _logger.warning("GoMart APi setCity not working or server Down.")
        return rec
 
    @api.multi
    def write(self, vals):
        _active = {True:1, False:2}
        is_active = ''
        if _active.get(vals.get('is_active')):
            is_active = _active.get(vals.get('is_active'))
        else:
            is_active = _active.get(self.is_active)
        if self.country_id.name == "United Arab Emirates":
                try:
                    gomart_server = self.env['gomart.server.api'].search([], limit=1)
                    if gomart_server and gomart_server.name:
                        city_API = setCity(
                                           gomart_server.name,
                                           self.id,  # erp_city_id
                                           vals.get('name') or self.name,  # erp_city_name
                                           vals.get('code') or self.code,  # erp_city_code
                                           vals.get('state_id') or self.state_id.id,  # erp_state_id
                                           is_active
                                           )
                        # Log
                        _logger.warning("\n\n\n" + " City API : " + 
                                        "\n Data : " + str(city_API.get('data')) + 
                                        "\n Status : " + str(city_API.get('status_code')) + 
                                        "\n json_dump :" + str(city_API.get('json_dump')))
                        if city_API.get("json_dump").get("code") == 200:
                            vals.update({"gomart_city_id":city_API.get("city_id")})
                        else:
                            _logger.warning('GoMart APi setCity,Invalid code %s' % 
                                        str(city_API.get("json_dump").get("code")) + ' ' + 
                                        'GoMart error message : %s' % 
                                        str(city_API.get("json_dump").get("code") or 'None.'))
                    else:
                        _logger.warning("Please configure correct GoMart APi server.")
                except:
                    _logger.warning("GoMart APi setCity not working or server Down.")
        return super(CityCity, self).write(vals)

