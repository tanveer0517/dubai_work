# -*- coding: utf-8 -*-
##############################################################################
#
#    Bista Solutions Pvt. Ltd
#    Copyright (C) 2018 (http://www.bistasolutions.com)
#
##############################################################################
from odoo import models, fields, api, exceptions
from gomartapi import *
import logging

_logger = logging.getLogger(__name__)


class CityArea(models.Model):
    _inherit = 'city.area'

    server_id = fields.Many2one('saas_portal.server', 'Server name')
    gomart_location_id = fields.Char('GoMart Locality ID', readonly='True', help='This will be generated by GoMart API')
    is_active = fields.Boolean('Active', default='True', help='Default True')

    @api.model
    def create(self, values):
        _active = {True:1, False:2}
        rec = super(CityArea, self).create(values)
        if rec.city_id.country_id.name == "United Arab Emirates":
            try:
                gomart_server = self.env['gomart.server.api'].search([], limit=1)
                if gomart_server and gomart_server.name: 
                    loc_API = setLocation(
                                        gomart_server.name,
                                        rec.city_id.state_id.id ,  # erp_state_id
                                        rec.city_id.id,  # erp_city_id
                                        rec.id,  # erp_location_id
                                        rec.name,  # erp_location_name
                                        _active.get(rec.is_active)  # active
                                        )
                    # Log
                    _logger.warning("\n\n\n" + " Location API : " + 
                                    "\n Data : " + str(loc_API.get('data')) + 
                                    "\n Status : " + str(loc_API.get('status_code')) + 
                                    "\n json_dump :" + str(loc_API.get('json_dump')))
                    if loc_API.get("json_dump").get("code") == 200:
                        rec.gomart_location_id = loc_API.get("location_id")
                    else:
                        _logger.warning('GoMart APi setLocation Invalid %s' % 
                            str(loc_API.get('json_dump').get('code')) + ' ' + 
                               'GoMart Message : %s' % 
                               str(loc_API.get('json_dump').get('error') or 'None.'))
                else:
                    _logger.warning("Please configure correct GoMart APi server.")
            except:
                _logger.warning("GoMart APi setLocation not working or server Down.")
        return rec

    @api.multi
    def write(self, vals):
        _active = {True:1, False:2}
        is_active = ''
        if _active.get(vals.get('is_active')):
            is_active = _active.get(vals.get('is_active'))
        else:
            is_active = _active.get(self.is_active)
        if self.city_id.country_id.name == "United Arab Emirates":
            try:
                gomart_server = self.env['gomart.server.api'].search([], limit=1)
                if gomart_server and gomart_server.name: 
                    loc_API = setLocation(
                                        gomart_server.name,
                                        vals.get('state_id') or self.city_id.state_id.id ,  # erp_state_id
                                        vals.get('city_id')or self.city_id.id,  # erp_city_id
                                        self.id,  # erp_location_id
                                        vals.get('name') or self.name,  # erp_location_name
                                        is_active
                                        )
                    # Log
                    _logger.warning("\n\n\n" + " Location API : " + 
                                    "\n Data : " + str(loc_API.get('data')) + 
                                    "\n Status : " + str(loc_API.get('status_code')) + 
                                    "\n json_dump :" + str(loc_API.get('json_dump')))
                    if loc_API.get("json_dump").get("code") == 200:
                        vals.update({'gomart_location_id':loc_API.get("location_id")})
                    else:
                        _logger.warning('GoMart APi setLocation Invalid %s' % 
                            str(loc_API.get('json_dump').get('code')) + ' ' + 
                               'GoMart Message : %s' % 
                               str(loc_API.get('json_dump').get('error') or 'None.'))
                else:
                    _logger.warning("Please configure correct GoMart APi server.")
            except:
                _logger.warning("GoMart APi setLocation not working or server Down.")
        return super(CityArea, self).write(vals)

